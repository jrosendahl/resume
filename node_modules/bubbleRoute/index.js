'use strict';
var winston = require('winston');
var logger = winston.loggers.get('MainLog');

module.exports = function (request, response) {
	var pathSplit = request.url.pathname.split('/');
	var routeIndex = 0;

	function bubbleDown () {
		routeIndex++;
		console.log(pathSplit);
		console.log(pathSplit[routeIndex]);
		try {
			var route = require('./'+pathSplit[routeIndex]);
			route(request);
		}
		catch (err){
			logger.info(err);
			response.writeHead(404, {"Content-Type":"text/plain; charset=utf-8"});
			response.write("404 Not found");
			response.end();
			return false;
		}
		
		
	}
	this.bubbleDown = bubbleDown;
	this.reply = {
		html: function(err, html) {
			if(err) {
				logger.error(err);
				logger.error(err.stack);
				response.writeHead(500, {"Content-Type":"text/plain; charset=utf-8"});
				response.write("500 Server Error.  Sorry :(");
				response.end();
			}
			else {
				response.statusCode = 200;
				response.setHeader('Content-Type','text/html; charset=utf-8');
				response.setHeader('Cache-Control', 'no-cache');
				response.setHeader('Set-Cookie', request.cookieHeader());
				response.write(html.stringifyHTML());
				response.end();
			}
		},
		json: function (err, obj) {
			if(err) {
				logger.error(err);
				logger.error(err.stack);
				response.writeHead(500, {"Content-Type":"text/plain; charset=utf-8"});
				response.write("500 Server Error.  Sorry :(");
				response.end();
			}
			else {
				response.setHeader('Content-Type','text/html; charset=utf-8');
				response.setHeader('Cache-Control', 'no-cache');
				response.setHeader('Set-Cookie', request.cookieHeader());
				response.write(JSON.stringify(obj));
				response.end();
			}
		},

	};
};



/*
	function returnHTML(err, html) {
		
	}
	

	function reroute(err,newRoute) {
		if(err) {
			logger.error(err);
			logger.error(err.stack);
			response.writeHead(500, {"Content-Type":"text/plain; charset=utf-8"});
			response.write("500 Server Error.  Sorry :(");
			response.end();
		}
		else {
			request.routeIndex = 1;
			request.url.pathname = newRoute;
			route(request,response, session);
		}
	}

	function redirect(err,newURL) {
		if(err) {
			logger.error(err);
			logger.error(err.stack);
			response.writeHead(500, {"Content-Type":"text/plain; charset=utf-8"});
			response.write("500 Server Error.  Sorry :(");
			response.end();
		}
		else{
			response.statusCode = 303;
			response.setHeader('Content-Type','text/html; charset=utf-8');
			response.setHeader('Location', newURL);
			response.setHeader('Set-Cookie', request.cookieHeader());
			response.end();
		}
	}

	function text(err, file) {
		if(err) {
			response.writeHead(500, {'Content-Type': 'text/plain'});
			response.write("500 Server Error.  Sorry :(");
			logger.error(err.stack);
			response.end();
		} 
		else {
			response.statusCode = 200;
			response.setHeader('Content-Type',file.contentType);
			response.setHeader('Set-Cookie', request.cookieHeader());
			response.write(file.file);
			response.end();
		}
	}

	function binary(err, file) {
		if(err) {
			response.writeHead(500, {'Content-Type': 'text/plain'});
			response.write("500 Server Error.  Sorry :(");
			logger.error(err.stack);
			response.end();
		} 
		else {
			response.statusCode = 200;
			response.setHeader('Content-Type',file.contentType);
			response.setHeader('Set-Cookie', request.cookieHeader());
			response.write(file.file,'binary');
			response.end();
		}
	}
}






function route(request, response, session) {
	var route;
	//logger.info(request.url.pathname);
	request.pathSplit = 

	var pathname = request.pathSplit[request.routeIndex];

	function start() {
		getRoute();
	}

	function getRoute() {
		//look for the correct Route
		try {
			route = require('./'+pathname);
		}
		catch (err){
			logger.info(err);
			response.writeHead(404, {"Content-Type":"text/plain; charset=utf-8"});
			response.write("404 Not found");
			response.end();
			return false;
		}
		//set current Route
		doRouteAction();
	}


	function doRouteAction() {
		route(session,request, function(err,type,result) {
			switch(type) {
			case 'html':
				returnHTML(err,result);
				break;
			case 'json': 
				json(err, result);
				break;
			case 'reroute':
				reroute(err,result);
				break;
			case 'redirect':
				redirect(err,result);
				break;
			case 'text':
				text(err, result);
				break;
			case 'binary':
				binary(err, result);
				break;
			}

		});
	}

	
	start();	
}
*/